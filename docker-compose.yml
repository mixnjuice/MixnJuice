version: '3'
services:
  frontend:
    build:
      context: ./frontend/
      args:
        API_URL: ${FRONTEND_API_URL}
    image: mixnjuice/frontend:latest
    container_name: mixnjuice-frontend
    restart: always
    networks:
      - proxy
    labels:
      - "traefik.docker.network=mixnjuice_proxy"
      - "traefik.enable=true"
      - "traefik.port=${FRONTEND_PORT}"
      - "traefik.http.routers.ui.rule=Host(`${FRONTEND_HOST}`)"
      - "traefik.http.routers.ui.tls=true"
      - "traefik.http.routers.ui.tls.certresolver=mixnjuice"
  api:
    build: ./api/
    image: mixnjuice/api:latest
    container_name: mixnjuice-api
    restart: always
    environment:
      API_EMAIL_SIMULATE: ${API_EMAIL_SIMULATE}
      API_EMAIL_FROM_ADDRESS: ${API_EMAIL_FROM_ADDRESS}
      API_TOKEN_AGE: ${API_TOKEN_AGE}
      API_TOKEN_LENGTH: ${API_TOKEN_LENGTH}
      API_TOKEN_SECRET: ${API_TOKEN_SECRET}
      API_PASSWORD_SALT_ROUNDS: ${API_PASSWORD_SALT_ROUNDS}
      API_HOST: ${API_HOST}
      API_PORT: ${API_PORT}
      WEB_HOSTNAME: ${FRONTEND_HOST}
      WEB_PORT: ${FRONTEND_PORT}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_KEY_ID: ${AWS_SECRET_KEY_ID}
      DB_HOST: database
      DB_NAME: ${DB_NAME}
      DB_PASS: ${DB_PASS}
      DB_USER: ${DB_USER}
    depends_on:
      - database
    networks:
      - backend
      - proxy
    labels:
      - "traefik.docker.network=mixnjuice_proxy"
      - "traefik.enable=true"
      - "traefik.port=${API_PORT}"
      - "traefik.http.routers.api.rule=Host(`${API_HOST}`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=mixnjuice"
  database:
    image: postgres:latest
    container_name: mixnjuice-api-pg
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - backend
  proxy:
    build: ./proxy/
    container_name: mixnjuice-proxy
    networks:
      - default
      - proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - certs:/certs
      - logs:/logs
networks:
  backend:
  proxy:
volumes:
  certs:
  logs:
